parameters:
- name: azureSubscription
  type: string
  
- name: pythonVersion
  type: string

- name: dependsOn
  type: string
  default: ''

- name: stageName
  type: string 

- name: resourceGroup
  type: string


- name: deploy
  type: boolean

stages:

- stage: Deploy_Function_Content
  displayName: push python code to azure function
  pool:
    vmImage: 'ubuntu-latest'
  dependsOn: ${{ parameters.stageName }}
  jobs: 
  - job: Deploy_Function_Content
    condition: eq('${{parameters.deploy}}', 'True')
    variables:
      vmImageName: 'ubuntu-latest'
      workingDirectory: './content/function-content'
    steps:
    
# Downloading the artifact that contains the data used to deploy the Azure Function  
      - download: current
        artifact: ${{ parameters.stageName }}

# Putting the data used to deploy the Azure Function inside variables so it can be used later
      - bash: |
          sudo apt-get install dos2unix -y
          dos2unix $(Pipeline.Workspace)/${{parameters.stageName}}/funcName $(Pipeline.Workspace)/${{parameters.stageName}}/funcName
          dos2unix $(Pipeline.Workspace)/${{parameters.stageName}}/funcRg $(Pipeline.Workspace)/${{parameters.stageName}}/funcRg
          functionAppName=$(cat $(Pipeline.Workspace)/${{parameters.stageName}}/funcName)
          funcRg=$(cat $(Pipeline.Workspace)/${{parameters.stageName}}/funcRg)
          echo "##vso[task.setvariable variable=functionAppName]$functionAppName"
          echo "##vso[task.setvariable variable=funcRg]$funcRg"

# Preparing the extensions 
      - bash: |
          if [ -f extensions.csproj ]
          then
              dotnet build extensions.csproj --runtime ubuntu.16.04-x64 --output ./bin
          fi
        workingDirectory: $(workingDirectory)
        displayName: 'Build extensions'

#Install the python version to prepare the Azure Function environment
      - task: UsePythonVersion@0
        displayName: 'Use Python ${{parameters.pythonVersion}}'
        inputs:
          versionSpec: '${{parameters.pythonVersion}}'

#Install the Azure Function code dependencies 
      - bash: |
          pip install --target="./.python_packages/lib/site-packages" -r ./requirements.txt 
        workingDirectory: $(workingDirectory)
        displayName: 'Install application dependencies'

#Zip the whole Azure Function environment so it can be pushed to the Azure Function resource
      - task: ArchiveFiles@2
        displayName: 'Archive files'
        inputs:
          rootFolderOrFile: '$(workingDirectory)'
          includeRootFolder: false
          archiveType: zip
          archiveFile: $(Build.ArtifactStagingDirectory)/$(functionAppName)-$(Build.BuildId).zip
          replaceExistingArchive: true

#Push the Azure Function enviormente zip as an artifact so it can be pushed to the Azure Function Resource
      - publish: $(Build.ArtifactStagingDirectory)/$(functionAppName)-$(Build.BuildId).zip
        artifact: drop-function
        
#Push the Azure Function enviormente zip to the Azure Function Resource     
      - task: AzureCLI@2
        displayName: "Azure functions app deploy"
        inputs:
          workingDirectory: "$(Pipeline.Workspace)/Extracted/"
          azureSubscription: $(azureSubscription)
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            az functionapp deployment source config-zip -g $(funcRg) -n $(functionAppName) --src $(Build.ArtifactStagingDirectory)/$(functionAppName)-$(Build.BuildId).zip
