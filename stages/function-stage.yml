parameters:
- name: azureSubscription
  type: string
  
- name: pythonVersion
  type: string

- name: dependsOn
  type: string
  default: ''

- name: stageName
  type: string 

- name: resourceGroup
  type: string

stages:

#- template: './get-info-stage.yml'
#  parameters:
#    azureSubscription: ${{parameters.azureSubscription}}
#    resourceGroup: ${{parameters.resourceGroup}}
#    tagValue:  ${{parameters.tagValue}}
#    dependsOn: ${{parameters.dependsOn}}
#    resoucType: "microsoft.web/sites"
#    stageName: ${{ parameters.stageName }}

- stage: Deploy_Function_Content
  displayName: push python code to azure function
  pool:
    vmImage: 'ubuntu-latest'
  dependsOn: ${{ parameters.stageName }}
  jobs: 
  - job: Deploy_Function_Content
    variables:
      vmImageName: 'ubuntu-latest'
      workingDirectory: './content/function-content'
    steps:

      - download: current
        artifact: ${{ parameters.stageName }}

      - bash: |
          sudo apt-get install dos2unix -y
          dos2unix $(Pipeline.Workspace)/${{parameters.stageName}}/funcName $(Pipeline.Workspace)/${{parameters.stageName}}/funcName
          functionAppName=$(cat $(Pipeline.Workspace)/${{parameters.stageName}}/funcName)
          echo "##vso[task.setvariable variable=functionAppName]$functionAppName"

    
      - bash: |
          echo "$(functionAppName)"
          echo "$functionAppName"

      - bash: |
          if [ -f extensions.csproj ]
          then
              dotnet build extensions.csproj --runtime ubuntu.16.04-x64 --output ./bin
          fi
        workingDirectory: $(workingDirectory)
        displayName: 'Build extensions'

      - task: UsePythonVersion@0
        displayName: 'Use Python ${{parameters.pythonVersion}}'
        inputs:
          versionSpec: '${{parameters.pythonVersion}}'

      - bash: |
          pip install --target="./.python_packages/lib/site-packages" -r ./requirements.txt 
        workingDirectory: $(workingDirectory)
        displayName: 'Install application dependencies'

      - task: ArchiveFiles@2
        displayName: 'Archive files'
        inputs:
          rootFolderOrFile: '$(workingDirectory)'
          includeRootFolder: false
          archiveType: zip
          archiveFile: $(Build.ArtifactStagingDirectory)/$(functionAppName)-$(Build.BuildId).zip
          replaceExistingArchive: true

      - publish: $(Build.ArtifactStagingDirectory)/$(functionAppName)-$(Build.BuildId).zip
        artifact: drop-function


      - task: AzureFunctionApp@1
        displayName: 'Azure functions app deploy'
        inputs:
          azureSubscription: '$(azureSubscription)'
          appType: functionAppLinux
          appName: "$(functionAppName)"
          package: $(Build.ArtifactStagingDirectory)/$(functionAppName)-$(Build.BuildId).zip

- stage: Add_Func_Env_Vars
  displayName: push url env vars to azure function
  dependsOn : Deploy_Function_Content
  pool:
    vmImage: 'ubuntu-latest'
  jobs :
    - job: Add_Func_Env_Vars
      variables:
        projectRoot: '$(System.DefaultWorkingDirectory)'
      steps:
        - download: current
          artifact: ${{ parameters.stageName }}

        - bash: |
              sudo apt-get install dos2unix -y
              dos2unix $(Pipeline.Workspace)/${{parameters.stageName}}/appUrl $(Pipeline.Workspace)/${{parameters.stageName}}/appUrl
              dos2unix $(Pipeline.Workspace)/${{parameters.stageName}}/funcKey $(Pipeline.Workspace)/${{parameters.stageName}}/funcKey
              dos2unix $(Pipeline.Workspace)/${{parameters.stageName}}/fullyQualifiedDomainName $(Pipeline.Workspace)/${{parameters.stageName}}/fullyQualifiedDomainName
              dos2unix $(Pipeline.Workspace)/${{parameters.stageName}}/funcName $(Pipeline.Workspace)/${{parameters.stageName}}/funcName
              dos2unix $(Pipeline.Workspace)/${{parameters.stageName}}/aksIp $(Pipeline.Workspace)/${{parameters.stageName}}/aksIp
              fullyQualifiedDomainName=$(cat $(Pipeline.Workspace)/${{parameters.stageName}}/fullyQualifiedDomainName)
              appUrl=$(cat $(Pipeline.Workspace)/${{parameters.stageName}}/appUrl)
              funcKey=$(cat $(Pipeline.Workspace)/${{parameters.stageName}}/funcKey)
              funcName=$(cat $(Pipeline.Workspace)/${{parameters.stageName}}/funcName)
              aksIp=$(cat $(Pipeline.Workspace)/${{parameters.stageName}}/aksIp)
              echo "##vso[task.setvariable variable=fullyQualifiedDomainName]$fullyQualifiedDomainName"
              echo "##vso[task.setvariable variable=funcKey]$funcKey"
              echo "##vso[task.setvariable variable=appUrl]$appUrl"
              echo "##vso[task.setvariable variable=funcName]$funcName"
              echo "##vso[task.setvariable variable=aksIp]$aksIp"

        - task: AzureCLI@2
          inputs:
            azureSubscription: ${{ parameters.azureSubscription }} 
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              az functionapp config appsettings set -g ${{ parameters.resourceGroup }} -n $(funcName) --settings "sql_url=$(fullyQualifiedDomainName)" "app_url=$(appUrl)" "aks_url=${{ parameters.aksUrl }}" "aks_ip=$(aksIp)"
