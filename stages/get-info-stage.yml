# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
parameters:
  - name: resourceGroup
    type: string
    
  - name: tagValue
    type: string
    default: "proj"

  - name: dependsOn
    type: string
    default: ''  

  - name: dependsOn2
    type: string
    default: ''  
    
  - name: azureSubscription
    type: string

  - name: stageName
    type: string


stages:

  - stage: ${{parameters.stageName}}
    dependsOn : 
    - ${{ if parameters.dependsOn }}:
      - ${{parameters.dependsOn}}
      - ${{parameters.dependsOn2}}

    jobs:

      - job: ${{parameters.stageName}}
        pool:
          vmImage: 'windows-latest'
        steps:
        - task: AzureCLI@2
          inputs:
            azureSubscription: ${{ parameters.azureSubscription }}
            scriptType: 'ps'
            scriptLocation: 'inlineScript'
            inlineScript: |
              $funcName = "HttpTrigger1"
              $resources = $(az resource list --tag deployedby="proj" ) | ConvertFrom-json
              $resourcesType = @('Microsoft.Web/sites','Microsoft.ContainerRegistry/registries','microsoft.sql/servers', 'Microsoft.ContainerService/managedClusters')
              mkdir -p $(Pipeline.Workspace)/${{parameters.stageName}}       
              echo "not found" > $(Pipeline.Workspace)/${{parameters.stageName}}/acrName
              echo "not found" > $(Pipeline.Workspace)/${{parameters.stageName}}/acrUrl
              echo "not found" > $(Pipeline.Workspace)/${{parameters.stageName}}/sqlServerName
              echo "not found" > $(Pipeline.Workspace)/${{parameters.stageName}}/fullyQualifiedDomainName      
              echo "not found" > $(Pipeline.Workspace)/${{parameters.stageName}}/funcName
              echo "not found" > $(Pipeline.Workspace)/${{parameters.stageName}}/funcUrl
              echo "not found" > $(Pipeline.Workspace)/${{parameters.stageName}}/funcKey
              echo "not found" > $(Pipeline.Workspace)/${{parameters.stageName}}/appName
              echo "not found" > $(Pipeline.Workspace)/${{parameters.stageName}}/appUrl
              echo "not found" > $(Pipeline.Workspace)/${{parameters.stageName}}/aksIp
              
              Start-Sleep -Seconds 100

              foreach( $resource in $resources ) 
              { 
              if($resourcesType -contains $resource.type )
              {
              if ($resource.type -eq "Microsoft.ContainerRegistry/registries"){
                $acrInfo = $(az acr show --name $resource.name --resource-group $resource.resourceGroup) | convertFrom-json
                echo $resource.name > $(Pipeline.Workspace)/${{parameters.stageName}}/acrName
                echo $acrInfo.loginServer > $(Pipeline.Workspace)/${{parameters.stageName}}/acrUrl
              }
              elseif ($resource.type -eq "microsoft.sql/servers"){
                $sqlInfo = $(az sql server show --name $resource.name --resource-group $resource.resourceGroup) | convertFrom-json
                echo $resource.name > $(Pipeline.Workspace)/${{parameters.stageName}}/sqlServerName
                echo $sqlInfo.fullyQualifiedDomainName > $(Pipeline.Workspace)/${{parameters.stageName}}/fullyQualifiedDomainName
              }
              elseif ($resource.type -eq "Microsoft.Web/sites" -and  $resource.kind -eq "functionapp,linux"){
                if (${{parameters.stageName}} -ne "Get_Inicial_Info") {
                  $funcInfo = az functionapp function show -g $resource.resourceGroup -n $resource.name --function-name $funcName | ConvertFrom-json
                  $funcKey = az functionapp function keys list -g $resource.resourceGroup -n $resource.name --function-name $funcName | Convertfrom-json
                  echo $funcInfo.invokeUrlTemplate > $(Pipeline.Workspace)/${{parameters.stageName}}/funcUrl
                  echo $funcKey.default > $(Pipeline.Workspace)/${{parameters.stageName}}/funcKey
                }
                echo $resource.name > $(Pipeline.Workspace)/${{parameters.stageName}}/funcName
              }
                elseif ($resource.type -eq "Microsoft.Web/sites" -and  $resource.kind -eq "app,linux"){
                $appInfo = $(az webapp show --name $resource.name  --resource-group $resource.resourceGroup) | convertFrom-json
                echo $resource.name > $(Pipeline.Workspace)/${{parameters.stageName}}/appName
                echo $appInfo.defaultHostName > $(Pipeline.Workspace)/${{parameters.stageName}}/appUrl
              }
                elseif ($resource.type -eq "Microsoft.ContainerService/managedClusters"){
                  $stageName = Out-String -Stream -InputObject ${{parameters.stageName}} 
                  if ( $stageName -ne "Get_Inicial_Info") {
                    az aks get-credentials --name $resource.name --resource-group  $resource.resourceGroup
                    $aksIp = kubectl get -n ingress-ngnix service/ingress-ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}'  
                    echo $aksIp > $(Pipeline.Workspace)/${{parameters.stageName}}/aksIp
                    }
                 }
               }
              }
                   
        - publish: $(Pipeline.Workspace)/${{parameters.stageName}}
          artifact: ${{parameters.stageName}}
