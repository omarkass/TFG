parameters:
- name: azureSubscription
  type: string
  #default: 'Azure subscription 1(2c02e9f9-7fad-4208-82e1-4e97500b5e0e)'
  
- name: aksclusterName
  type: string 
  #default: 'aks'
  
#- name: acrUrl
#  type: string
  #default: 'projdevacr.azurecr.io' 
  

- name: resourceGroupName
  type: string 
  #default: 'proj-dev-app-rg'

- name: appImageName  
  type: string
  #default: proj


- name: prometheusExporterImageName  
  type: string
  #default: proj

- name: dependsOn
  type: string
  default: ''  

- name: stageName
  type: string 


stages:

- stage: Deploy_K8s_Content
  displayName: create and push kubernetes content
  dependsOn: 
    - ${{ parameters.stageName }}
    - ${{ parameters.dependsOn }}
  jobs:
  - job: Deploy_K8s_Content
    pool:
      vmImage: 'ubuntu-latest'
    steps:

      - download: current
        artifact: ${{ parameters.stageName }}

      - bash: |
          sudo apt-get install dos2unix -y
          dos2unix $(Pipeline.Workspace)/${{parameters.stageName}}/acrUrl $(Pipeline.Workspace)/${{parameters.stageName}}/acrUrl
          dos2unix $(Pipeline.Workspace)/${{parameters.stageName}}/resourceName $(Pipeline.Workspace)/${{parameters.stageName}}/resourceName
          acrUrl=$(cat $(Pipeline.Workspace)/${{parameters.stageName}}/acrUrl)
          echo "##vso[task.setvariable variable=acrUrl]$acrUrl"
          

      - task: DockerInstaller@0
        inputs:
          dockerVersion: '17.09.0-ce'
      - task: HelmInstaller@0
        inputs:
          helmVersion: '2.14.1'
          installKubectl: false
      - task: AzureCLI@2
        inputs:
          azureSubscription: ${{ parameters.azureSubscription }} 
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            az aks get-credentials --name ${{parameters.aksclusterName}} --resource-group ${{parameters.resourceGroupName}}
            az acr login --name $(acrUrl)
            docker build ./content/aks-content -t ${{parameters. appImageName}}
            docker tag "${{parameters. appImageName}}:latest" '$(acrUrl)'"/${{parameters. appImageName}}:latest"
            docker image ls
            docker push '$(acrUrl)'"/${{parameters. appImageName}}:latest"

            docker build ./content/aks-content/docker-images/azure-exporter -t ${{parameters.prometheusExporterImageName}}
            docker tag "${{parameters.prometheusExporterImageName}}:latest" '$(acrUrl)'"/${{parameters.prometheusExporterImageName}}:latest"
            docker image ls
            docker push '$(acrUrl)'"/${{parameters.prometheusExporterImageName}}:latest"

            kubectl delete --all deployment --namespace=default
            kubectl apply -f ./content/aks-content/dp.yml
            kubectl apply -f ./content/aks-content/svc.yml
            kubectl get svc 
            kubectl create ns monitoring 
            kubectl create ns ingress-ngnix
            output=$(helm list -A)         
            if [[ "$output" == *"grafana"* ]]; then    
              helm upgrade -n monitoring grafana ./content/aks-content/kube-prometheus-stack
             else
              helm install -n monitoring grafana ./content/aks-content/kube-prometheus-stack
            fi 
            if [[ "$output" == *"ingress-ngnix"* ]]; then 
              helm upgrade -n ingress-ngnix ingress ./content/aks-content/ingress-ngnix
            else
              helm install -n ingress-ngnix ingress ./content/aks-content/ingress-ngnix
            fi
            if [[ "$output" == *"elasticsearch"* ]]; then 
              helm upgrade -n monitoring elasticsearch ./content/aks-content/elasticsearch
            else
              helm install -n monitoring elasticsearch ./content/aks-content/elasticsearch
            fi       
