parameters:
- name: azureSubscription
  type: string
  #default: 'Azure subscription 1(2c02e9f9-7fad-4208-82e1-4e97500b5e0e)'
  
- name: aksclusterName
  type: string 
  #default: 'aks'
    

- name: resourceGroupName
  type: string 
  #default: 'proj-dev-app-rg'

- name: appImageName  
  type: string
  #default: proj


- name: prometheusExporterImageName  
  type: string
  #default: proj

- name: dependsOn
  type: string
  default: ''  


- name: appImageVersion
  type: string
 

- name: stageName
  type: string 


- name: ingressHostname
  type: string  

- name: deploy
  type: boolean

- name: deployGrafana
  type: boolean  

- name: sqlPassword
  type: string

- name: sqlUserName
  type: string

- name: databaseName
  type: string    

- name: port
  type: number  


stages:

- stage: Deploy_K8s_Content
  displayName: create and push kubernetes content
  dependsOn: 
    - ${{ parameters.stageName }}
    - ${{ parameters.dependsOn }}
  jobs:
  - job: Deploy_K8s_Content
    condition: eq('${{parameters.deploy}}', 'True')
    pool:
      vmImage: 'ubuntu-latest'
    steps:
# Downloading the artifact that contains the data used to deploy the Aks  
      - download: current
        artifact: ${{ parameters.stageName }}
# Putting the data used to deploy the Aks inside variables so it can be used later
      - bash: |
              sudo apt-get install dos2unix -y
              dos2unix $(Pipeline.Workspace)/${{parameters.stageName}}/acrUrl $(Pipeline.Workspace)/${{parameters.stageName}}/acrUrl
              dos2unix $(Pipeline.Workspace)/${{parameters.stageName}}/funcUrl $(Pipeline.Workspace)/${{parameters.stageName}}/funcUrl
              dos2unix $(Pipeline.Workspace)/${{parameters.stageName}}/funcKey $(Pipeline.Workspace)/${{parameters.stageName}}/funcKey
              dos2unix $(Pipeline.Workspace)/${{parameters.stageName}}/appUrl $(Pipeline.Workspace)/${{parameters.stageName}}/appUrl
              dos2unix $(Pipeline.Workspace)/${{parameters.stageName}}/subId $(Pipeline.Workspace)/${{parameters.stageName}}/subId
              dos2unix $(Pipeline.Workspace)/${{parameters.stageName}}/fullyQualifiedDomainName $(Pipeline.Workspace)/${{parameters.stageName}}/fullyQualifiedDomainName
              acrUrl=$(cat $(Pipeline.Workspace)/${{parameters.stageName}}/acrUrl)
              fullyQualifiedDomainName=$(cat $(Pipeline.Workspace)/${{parameters.stageName}}/fullyQualifiedDomainName)
              funcUrl=$(cat $(Pipeline.Workspace)/${{parameters.stageName}}/funcUrl)
              funcKey=$(cat $(Pipeline.Workspace)/${{parameters.stageName}}/funcKey)
              appUrl=$(cat $(Pipeline.Workspace)/${{parameters.stageName}}/appUrl)
              subId=$(cat $(Pipeline.Workspace)/${{parameters.stageName}}/subId)
              echo "##vso[task.setvariable variable=acrUrl]$acrUrl"
              echo "##vso[task.setvariable variable=fullyQualifiedDomainName]$fullyQualifiedDomainName"
              echo "##vso[task.setvariable variable=funcKey]$funcKey"
              echo "##vso[task.setvariable variable=funcUrl]$funcUrl"
              echo "##vso[task.setvariable variable=appUrl]$appUrl"
              echo "##vso[task.setvariable variable=subId]$subId"
          
# Install Docker
      - task: DockerInstaller@0
        inputs:
          dockerVersion: '17.09.0-ce'
# Install helm           
      - task: HelmInstaller@0
        inputs:
          helmVersion: '2.14.1'
          installKubectl: false
# Create Aks Docker images and the Aks projects using helm, and in case the projects already exists only update them      
      - task: AzureCLI@2
        inputs:
          azureSubscription: ${{ parameters.azureSubscription }} 
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            sed -i "s/subid/$(subId)/" ./content/aks-content/docker-images/azure-exporter/azure.yml
            cat ./content/aks-content/docker-images/azure-exporter/azure.yml
            az aks get-credentials --name ${{parameters.aksclusterName}} --resource-group ${{parameters.resourceGroupName}}
            az acr login --name $(acrUrl)
            docker build ./content/aks-content/docker-images/app -t ${{parameters. appImageName}}
            docker tag "${{parameters.appImageName}}:latest" '$(acrUrl)'"/${{parameters.appImageName}}"":${{ parameters.appImageVersion }}"
            docker image ls
            docker push '$(acrUrl)'"/${{parameters. appImageName}}:${{ parameters.appImageVersion }}"

            docker build ./content/aks-content/docker-images/azure-exporter -t ${{parameters.prometheusExporterImageName}}
            docker tag "${{parameters.prometheusExporterImageName}}:latest" '$(acrUrl)'"/${{parameters.prometheusExporterImageName}}:latest"
            docker image ls
            docker push '$(acrUrl)'"/${{parameters.prometheusExporterImageName}}:latest"

            kubectl get svc 
            kubectl create ns monitoring 
            kubectl create ns ingress-ngnix
            output=$(helm list -A)    

            if [[ "$output" == *"ingress-ngnix"* ]]; then 
              helm upgrade -n ingress-ngnix ingress ./content/aks-content/helm-projects/ingress-ngnix
            else
              helm install -n ingress-ngnix ingress ./content/aks-content/helm-projects/ingress-ngnix
            fi  

            if [  "$output" == *"grafana"* ] &&[  "${{parameters.deployGrafana}}" = True ] ; 
            then
            helm upgrade -n monitoring --set azure-exporter.po.imageUrl=r67qx6zxzeg6m.azurecr.io/azure-exporter:latest  grafana ./content/aks-content/helm-projects/kube-prometheus-stack
            elif [ "${{parameters.deployGrafana}}" = True ]; 
            then
            helm install -n monitoring --set azure-exporter.po.imageUrl=r67qx6zxzeg6m.azurecr.io/azure-exporter:latest grafana ./content/aks-content/helm-projects/kube-prometheus-stack
            fi

            if [[ "$output" == *"app"* ]]; then 
              helm upgrade --set configMap.sqlUrlValue='$(fullyQualifiedDomainName)' --set container.port='${{parameters.port}}' --set configMap.funcUrlValue='$(funcUrl)' --set configMap.funcCodeValue='$(funcKey)' --set configMap.appUrlValue='$(appUrl)'  --set configMap.sqlPasswordValue="${{parameters.sqlPassword}}"    --set configMap.sqlUsernameValue="${{parameters.sqlUserName}}"   --set configMap.sqlNameValue="${{parameters.databaseName}}"   --set container.imageUrl='$(acrUrl)'"/${{parameters.appImageName}}:${{ parameters.appImageVersion }}"  app ./content/aks-content/helm-projects/app
            else
              helm install --set configMap.sqlUrlValue='$(fullyQualifiedDomainName)' --set container.port='${{parameters.port}}' --set ingress.hostName='${{parameters.ingressHostname}}' --set configMap.funcUrlValue='$(funcUrl)' --set configMap.funcCodeValue='$(funcKey)' --set configMap.appUrlValue='$(appUrl)' --set configMap.sqlPasswordValue="${{parameters.sqlPassword}}"    --set configMap.sqlUsernameValue="${{parameters.sqlUserName}}"   --set configMap.sqlNameValue="${{parameters.databaseName}}"  --set container.imageUrl='$(acrUrl)'"/${{parameters.appImageName}}:${{ parameters.appImageVersion }}"  app ./content/aks-content/helm-projects/app
            fi
