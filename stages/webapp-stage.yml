parameters:
- name: azureSubscription
  type: string

- name: pythonVersion
  type: string

- name: dependsOn
  type: string
  default: ''  

- name: stageName
  type: string

- name: resourceGroup
  type: string

- name: deploy
  type: boolean


stages:


- stage: Deploy_Webapp_Content
  displayName: push webapp code to azure webapp
  dependsOn : ${{ parameters.stageName }}
  pool:
    vmImage: 'ubuntu-latest'
  jobs :
    - job: Deploy_Webapp_Content
      condition: eq('${{parameters.deploy}}', 'True')
      variables:
        projectRoot: '$(System.DefaultWorkingDirectory)'
      steps:
# Downloading the artifact that contains the data used to deploy the Azure Webapp
        - download: current
          artifact: ${{ parameters.stageName }}
# Putting the data used to deploy the Azure Webapp inside variables so it can be used later

        - bash: |
            sudo apt-get install dos2unix -y
            dos2unix $(Pipeline.Workspace)/${{parameters.stageName}}/appName $(Pipeline.Workspace)/${{parameters.stageName}}/appName
            webAppName=$(cat $(Pipeline.Workspace)/${{parameters.stageName}}/appName)
            echo "##vso[task.setvariable variable=webAppName]$webAppName"
# Installing the specified python version

        - task: UsePythonVersion@0
          displayName: 'Use Python ${{parameters.pythonVersion}}'
          inputs:
            versionSpec: '${{parameters.pythonVersion}}'

# Installing the code requirements
        - script: |
            python -m venv antenv
            source antenv/bin/activate
            python -m pip install --upgrade pip
            pip install setup
            pip install -r requirements.txt
          workingDirectory: $(projectRoot)/content/webapp-content
          displayName: "Install requirements"

# Compress the environment and push it as an artifact
        - task: ArchiveFiles@2
          displayName: 'Archive files'
          inputs:
            rootFolderOrFile: '$(projectRoot)/content/webapp-content'
            includeRootFolder: false
            archiveType: zip
            archiveFile: $(Build.ArtifactStagingDirectory)/$(webAppName)-$(Build.BuildId).zip
            replaceExistingArchive: true

# Upload the artifact, so it can be used Glopaly 
        - upload: $(Build.ArtifactStagingDirectory)/$(webAppName)-$(Build.BuildId).zip
          displayName: 'Upload package'
          artifact: drop-webapp

            
# Deploy the content to the Azure Webapp
        - task: AzureWebApp@1
          displayName: 'Deploy Azure Web App'
          inputs:
            azureSubscription: ${{parameters.azureSubscription}}
            appName: $(webAppName)
            package: $(Build.ArtifactStagingDirectory)/$(webAppName)-$(Build.BuildId).zip



