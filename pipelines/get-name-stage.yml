# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
parameters:
  - name: resourceGroup
    type: string
    default: "proj-dev-func-rg"
    

  - name: resoucType
    type: string
    default: "microsoft.web/sites"
    
  - name: tagValue
    type: string
    default: "proj"

  
  - name: azureSubscription
    type: string


stages:

  - stage: firststage
    jobs:

      - job: firstjob
        pool:
          vmImage: 'windows-latest'
        steps:
        - task: AzureCLI@2
          inputs:
            azureSubscription: ${{ parameters.azureSubscription }}
            scriptType: 'ps'
            scriptLocation: 'inlineScript'
            inlineScript: |
              $find = "0"
              $resources = $(az resource list --tag deployedby="${{parameters.tagValue}}" ) | ConvertFrom-json
              foreach( $resource in $resources  ) { 
               if($resource.type -eq "${{parameters.resoucType}}" -and $resource.resourceGroup -eq "${{parameters.resourceGroup}}")
               {
               mkdir -p $(Pipeline.Workspace)/variables
               echo $resource.name > $(Pipeline.Workspace)/variables/FOO
               $find = 1
               }
               }
          # To pass the variable FOO, write it to a file
          # While the file name doesn't matter, naming it like the variable and putting it inside the $(Pipeline.Workspace)/variables folder could be a good pattern
      #  - bash: |
      #      FOO="$(ls)"
      #      mkdir -p $(Pipeline.Workspace)/variables
      #      echo "$FOO" > $(Pipeline.Workspace)/variables/FOO

        # Publish the folder as pipeline artifact
        - publish: $(Pipeline.Workspace)/variables
          artifact: variables

  

