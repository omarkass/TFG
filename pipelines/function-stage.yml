parameters:
- name: azureSubscription
  type: string

- name: resourceGroup
  type: string
  
- name: pythonVersion
  type: string

- name: tagValue
  type: string

- name: dependsOn
  type: string
  default: ''  

stages:


- template: './get-name-stage.yml'
  parameters:
    azureSubscription: ${{parameters.azureSubscription}}
    resourceGroup: ${{parameters.resourceGroup}}
    tagValue:  ${{parameters.tagValue}}
    dependsOn: ${{parameters.dependsOn}}

- stage: deploy_function_content
  displayName: push python code to azure function
  pool:
    vmImage: 'ubuntu-latest'
  dependsOn: get_resource_name
  jobs: 
  - job: deploy_function_content
    variables:
      vmImageName: 'ubuntu-latest'
      workingDirectory: './content/function-content'
    steps:

      - download: current
        artifact: variables

      - bash: |
          sudo apt-get install dos2unix -y
          dos2unix $(Pipeline.Workspace)/variables/FOO $(Pipeline.Workspace)/variables/FOO
          functionAppName=$(cat $(Pipeline.Workspace)/variables/FOO)
          echo "##vso[task.setvariable variable=functionAppName]$functionAppName"

    # Just like in the first example, we can expand the variable within Azure Pipelines itself
      - bash: |
          echo $(functionAppName)


      - bash: |
          if [ -f extensions.csproj ]
          then
              dotnet build extensions.csproj --runtime ubuntu.16.04-x64 --output ./bin
          fi
        workingDirectory: $(workingDirectory)
        displayName: 'Build extensions'

      - task: UsePythonVersion@0
        displayName: 'Use Python ${{parameters.pythonVersion}}'
        inputs:
          versionSpec: '${{parameters.pythonVersion}}'

      - bash: |
          pip install --target="./.python_packages/lib/site-packages" -r ./requirements.txt 
        workingDirectory: $(workingDirectory)
        displayName: 'Install application dependencies'

      - task: ArchiveFiles@2
        displayName: 'Archive files'
        inputs:
          rootFolderOrFile: '$(workingDirectory)'
          includeRootFolder: false
          archiveType: zip
          archiveFile: $(Build.ArtifactStagingDirectory)/$(functionAppName)-$(Build.BuildId).zip
          replaceExistingArchive: true

      - publish: $(Build.ArtifactStagingDirectory)/$(functionAppName)-$(Build.BuildId).zip
        artifact: drop-function


      - task: AzureFunctionApp@1
        displayName: 'Azure functions app deploy'
        inputs:
          azureSubscription: '$(azureSubscription)'
          appType: functionAppLinux
          appName: $(functionAppName)
          package: $(Build.ArtifactStagingDirectory)/$(functionAppName)-$(Build.BuildId).zip