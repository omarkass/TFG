# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger: none

variables:
  # Azure Resource Manager connection created during pipeline creation
  #azureServiceConnectionId: 'Service_connection'
  - template:  pipelines\vars\vars.yml  

stages:

  - stage: firststage
    jobs:

      - job: firstjob
        pool:
          vmImage: 'windows-latest'
        steps:
        - task: AzureCLI@2
          inputs:
            azureSubscription: 'Service_connection'
            scriptType: 'ps'
            scriptLocation: 'inlineScript'
            inlineScript: |
              $resources = $(az resource list --tag deployedby=proj ) | ConvertFrom-json
              foreach( $resource in $resources  ) { 
               if( $resource.type -eq "microsoft.web/sites" -and $resource.resourceGroup -eq "proj-dev-func-rg"){
               mkdir -p $(Pipeline.Workspace)/variables
               echo $resource.name > $(Pipeline.Workspace)/variables/FOO
               }
               }
          # To pass the variable FOO, write it to a file
          # While the file name doesn't matter, naming it like the variable and putting it inside the $(Pipeline.Workspace)/variables folder could be a good pattern
      #  - bash: |
      #      FOO="$(ls)"
      #      mkdir -p $(Pipeline.Workspace)/variables
      #      echo "$FOO" > $(Pipeline.Workspace)/variables/FOO

        # Publish the folder as pipeline artifact
        - publish: $(Pipeline.Workspace)/variables
          artifact: variables

  
  - stage: secondstage
    jobs:

      - job: secondjob
        pool:
         vmImage: 'Ubuntu-latest'
        steps:

          # Download the artifacts
          - download: current
            artifact: variables

          # Read the variable from the file, then expose it in the job
          - bash: |
              #vi $(Pipeline.Workspace)/variables/FOO
              #:setlocal ff=unix
              #:wq!
              sudo apt-get install dos2unix -y
              dos2unix $(Pipeline.Workspace)/variables/FOO $(Pipeline.Workspace)/variables/FOOL-LIN
              FOO=$(cat $(Pipeline.Workspace)/variables/FOO-LIN)
              echo "##vso[task.setvariable variable=FOO]$FOO"

          # Just like in the first example, we can expand the variable within Azure Pipelines itself
          - bash: |
              echo "$(FOO)"

          # Or we can expand it within bash, reading it as environmental variable
          - bash: |
